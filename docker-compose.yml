version: '3.8'

services:
  mysqldb:
    image: mysql:5.7
    container_name: mysqldb
    restart: unless-stopped
    env_file: ./.env  # Charger les variables depuis un fichier .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQLDB_ROOT_PASSWORD}  # Utilisation de variables d'environnement
      - MYSQL_DATABASE=${MYSQLDB_DATABASE}
    ports:
      - "${MYSQLDB_LOCAL_PORT}:${MYSQLDB_DOCKER_PORT}"  # Port local : port docker
    volumes:
      - db:/var/lib/mysql  # Volume persistant pour la base de données
    networks:
      - backend  # Réseau interne pour communication avec le backend

  back:
    depends_on:
      - mysqldb  # Dépend de mysqldb pour que MySQL soit prêt avant
    build:
      context: ./pfe-project  # Répertoire du backend
    container_name: back
    restart: unless-stopped
    env_file: ./.env  # Charger les variables depuis un fichier .env
    ports:
      - "${NODE_LOCAL_PORT}:${NODE_DOCKER_PORT}"  # Port local : port docker
    environment:
      - DB_HOST=mysqldb
      - DB_USER=${MYSQLDB_USER}
      - DB_PASSWORD=${MYSQLDB_ROOT_PASSWORD}
      - DB_NAME=${MYSQLDB_DATABASE}
      - DB_PORT=${MYSQLDB_DOCKER_PORT}
      - CLIENT_ORIGIN=${CLIENT_ORIGIN}
    networks:
      - backend  # Réseau interne pour communication avec mysqldb
      - frontend  # Réseau pour interagir avec le frontend

  front:
    depends_on:
      - back  # Dépend de bezkoder-api pour être sûr que l'API est prête
    build:
      context: ./pffe-project-front  # Répertoire du frontend
      args:
        - REACT_APP_API_BASE_URL=${CLIENT_API_BASE_URL}  # URL de l'API
    container_name: front
    ports:
      - "${REACT_LOCAL_PORT}:${REACT_DOCKER_PORT}"  # Port local : port docker
    networks:
      - frontend  # Réseau pour interagir avec le frontend

volumes: 
  db:  # Volume persistant pour la base de données MySQL

networks:
  backend:  # Réseau interne pour la communication backend <=> MySQL et backend <=> frontend
  frontend:  # Réseau interne pour la communication frontend <=> backend
